import socket
import sys
from concurrent.futures import ThreadPoolExecutor

def scan_port(ip, port):
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.settimeout(1)
    result = sock.connect_ex((ip, port))
    if result == 0:
        try:
            service = socket.getservbyport(port)
        except:
            service = "unknown"
        return port, True, service
    sock.close()
    return port, False, None

def scan_ports(ip, start_port, end_port):
    open_ports = []
    with ThreadPoolExecutor(max_workers=100) as executor:
        future_to_port = {executor.submit(scan_port, ip, port): port for port in range(start_port, end_port + 1)}
        for future in future_to_port:
            port, is_open, service = future.result()
            if is_open:
                open_ports.append((port, service))
    return open_ports

def check_vulnerabilities(ip, open_ports):
    vulnerabilities = []
    for port, service in open_ports:
        if service == "http" and port != 443:
            vulnerabilities.append(f"Port {port}: HTTP without SSL/TLS")
        elif port == 21:
            vulnerabilities.append(f"Port {port}: FTP - Consider using SFTP instead")
        elif port == 23:
            vulnerabilities.append(f"Port {port}: Telnet - Insecure, consider using SSH")
        elif port == 1433 or port == 3306:
            vulnerabilities.append(f"Port {port}: Database port exposed - Ensure it's properly secured")
    return vulnerabilities

def main():
    if len(sys.argv) != 2:
        print("Usage: python vulnerability_scanner.py <ip_address>")
        sys.exit(1)

    ip = sys.argv[1]
    start_port = 1
    end_port = 10000  # Extended port range

    print(f"Scanning {ip} for open ports and vulnerabilities...")
    open_ports = scan_ports(ip, start_port, end_port)

    if open_ports:
        print("\nOpen ports:")
        for port, service in open_ports:
            print(f"Port {port}: {service}")

        vulnerabilities = check_vulnerabilities(ip, open_ports)
        if vulnerabilities:
            print("\nPotential vulnerabilities:")
            for vuln in vulnerabilities:
                print(vuln)
        else:
            print("\nNo obvious vulnerabilities detected.")
    else:
        print("No open ports found. This could be due to:")
        print("1. A firewall blocking incoming connections")
        print("2. The IP address being incorrect or unreachable")
        print("3. The scanned system not running any services on open ports")
        print("\nTry the following:")
        print("- Ensure you're using the correct IP address")
        print("- Check your network connection to the target")
        print("- If scanning locally, try scanning your router's IP address")
        print("- Run the script with elevated privileges (sudo on Mac/Linux)")

if __name__ == "__main__":
    main()